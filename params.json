{"name":"Http Server","tagline":"A standard HTTP server, centered on the concept of routes.","body":"Want to create a simple HTTP server but don't wanna mess with figuring out how to perform a connection? How to add routes? How to create such routes?\r\n\r\nJust wanna focus on the feature you provide through this server and now how you built it?\r\n\r\nThis library is for you.\r\n\r\nWith a flexible and rich API created thanks to the [OOP](http://ymeine.github.io/oop/) library, you will just have to pass configuration object to the server, along with a list of routes, and just ask it to start!\r\n\r\nThere are multiple ways to create routes, with some standard behaviors implemented. One of the most important one is an RPC route: it is able to handle [RPC](http://en.wikipedia.org/wiki/Remote_procedure_call), and uses JSON for that.\r\n\r\n# Installation\r\n\r\n```bash\r\nnpm install git+https://github.com/ymeine/http-server\r\n```\r\n\r\n# Usage\r\n\r\nExample in [LiveScript](http://livescript.net/): \r\n\r\n```livescript\r\nrequire! {\r\n    server: 'http-server'\r\n}\r\n\r\n{run} = server\r\n\r\noptions = {\r\n    port: 8080 # default port, use another one if busy\r\n    -log # we don't use a logger\r\n}\r\n\r\nroutes = [\r\n    # Standard simple routes\r\n    'ping'\r\n    'shutdown'\r\n\r\n    # Standard complex routes: here RPC\r\n    {\r\n        type: 'rpc'\r\n        modules: {\r\n             'mod1': require('path1')\r\n             'mod2': {\r\n                 someMethod2: -> it\r\n             }\r\n        }\r\n    }\r\n]\r\n\r\nrun routes, options\r\n```\r\n\r\nA server on port 8080 will run and respond to routes: \r\n\r\n* `GET /ping` returns `200`\r\n* `GET /shutdown` shuts the server down\r\n* `POST /rpc` with `{\"module\": \"mod1\", method: \"someMethod\"}` returns the result of the method\r\n* `POST /rpc` with `{\"module\": \"mod2\", method: \"someMethod2\", argument: \"arg\"}` returns `\"arg\"`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}